<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Unico Kitchen — Modern</title>
<link rel="icon" href="data:;base64,iVBORw0KGgo=">
<style>
  :root{
    --bg:#fff7f1;
    --card:#ffffff;
    --muted:#6b7280;
    --accent:#ff6f3c; /* cookpad-like warm orange */
    --accent-2:#16a085; /* soft green */
    --danger:#ef4444;
    --radius:12px;
    --glass: rgba(255,255,255,0.8);
    font-family: Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
  }
  *{box-sizing:border-box}
  body{margin:0;background:linear-gradient(180deg,#fff8f3 0%, #fffefc 100%);color:#0f172a}
  header{background:linear-gradient(90deg,var(--accent), #e55d2c);color:#fff;padding:18px 20px;box-shadow:0 6px 20px rgba(12,15,30,0.06)}
  .wrap{max-width:1100px;margin:20px auto;padding:18px}
  .topbar{display:flex;justify-content:space-between;align-items:center;gap:12px}
  .brand{display:flex;gap:12px;align-items:center}
  .logo{width:52px;height:52px;border-radius:12px;background:#fff;display:flex;align-items:center;justify-content:center;color:var(--accent);font-weight:800}
  h1{margin:0;font-size:20px}
  .small{font-size:13px;color:var(--muted)}
  nav.tabs{display:flex;gap:8px;margin-top:12px}
  .tab{padding:8px 12px;border-radius:10px;background:transparent;border:1px solid transparent;cursor:pointer}
  .tab.active{background:#fff;border-color:rgba(0,0,0,0.06);box-shadow:0 6px 18px rgba(12,15,30,0.06)}
  .card{background:var(--card);border-radius:var(--radius);padding:16px;box-shadow:0 8px 30px rgba(12,15,30,0.06);margin-bottom:12px}
  .grid-2{display:grid;grid-template-columns:1fr 380px;gap:18px}
  @media (max-width:900px){ .grid-2{grid-template-columns:1fr} }
  input,button,select,textarea{font:inherit}
  input[type=text]{padding:10px;border-radius:10px;border:1px solid #eee;width:100%}
  .btn{background:var(--accent);color:#fff;border:none;padding:8px 12px;border-radius:10px;cursor:pointer}
  .btn.ghost{background:transparent;border:1px solid #eee;color:var(--muted)}
  .pill{background:#fff;padding:6px 8px;border-radius:999px;color:#444;font-weight:600}
  .badge{background:#fff;padding:6px 8px;border-radius:8px;color:#111}
  .section-title{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}
  ul{padding-left:16px;margin:8px 0}
  .recipe-card{border-radius:10px;padding:12px;border:1px solid #f1e7e1;margin-bottom:10px;background:linear-gradient(180deg,#fff,#fffaf7)}
  .recipe-card h4{margin:0}
  .recipe-small{font-size:13px;color:var(--muted)}
  .shop-grid{display:grid;grid-template-columns:repeat(2,1fr);gap:12px}
  @media (max-width:700px){ .shop-grid{grid-template-columns:repeat(1,1fr)} }
  .product{background:#fff;border-radius:12px;padding:8px;border:1px solid #efe8e3;display:flex;flex-direction:column;gap:8px}
  .product img{width:100%;height:140px;object-fit:cover;border-radius:10px;background:#f3f3f3}
  .product .meta{display:flex;justify-content:space-between;align-items:center}
  .price{font-weight:700}
  .oldprice{text-decoration:line-through;color:#888;font-size:13px;margin-left:8px}
  .offer{background:var(--accent-2);color:#fff;padding:6px 8px;border-radius:8px;font-weight:700;font-size:12px}
  .highlight{box-shadow:0 6px 20px rgba(24,160,133,0.08);border:2px solid #16a08520}
  .fridge-list{display:flex;flex-wrap:wrap;gap:8px}
  .fridge-item{background:#fff;padding:8px 10px;border-radius:999px;border:1px solid #eee;display:flex;gap:8px;align-items:center}
  .muted{color:var(--muted)}
  .center{display:flex;align-items:center;justify-content:center}
  .search{display:flex;gap:8px}
  .offer-banner{background:linear-gradient(90deg,#ffe8d9,#fff9f6);padding:10px;border-radius:12px;margin-bottom:12px;border:1px solid #ffe4d0;display:flex;justify-content:space-between;align-items:center}
  .modal{position:fixed;inset:0;background:rgba(0,0,0,0.35);display:flex;align-items:center;justify-content:center;z-index:999}
  .modal .card{width:100%;max-width:600px}
  .tiny{font-size:12px;color:var(--muted)}
</style>
</head>
<body>
<header>
  <div class="wrap topbar">
    <div class="brand">
      <div class="logo">UK</div>
      <div>
        <h1>Unico Kitchen</h1>
        <div class="small">Cook smarter — from your student fridge</div>
      </div>
    </div>
    <div class="center">
      <div id="userBadge" class="pill">Not signed</div>
    </div>
  </div>
</header>

<main class="wrap">
  <div class="card">
    <nav class="tabs" id="mainTabs">
      <div class="tab active" data-tab="dashboard">Dashboard</div>
      <div class="tab" data-tab="shop">Shop</div>
      <div class="tab" data-tab="fridge">My Fridge</div>
      <div class="tab" data-tab="submit">Submit Recipe</div>
    </nav>

    <div style="height:12px"></div>

    <!-- Login area (appears as overlay on top of content if not signed) -->
    <div id="loginBox" style="display:flex;gap:8px;align-items:center">
      <input id="codeInput" type="text" placeholder="Enter student code (e.g. STU001)" />
      <button id="btnLogin" class="btn">Sign in</button>
      <button id="btnRemember" class="btn ghost">Remember</button>
      <div style="flex:1"></div>
      <div class="tiny muted">Secret-code login enabled</div>
    </div>
  </div>

  <div id="contentArea" class="grid-2">

    <!-- LEFT: main column -->
    <div>
      <!-- Dashboard -->
      <div id="dashboardTab" class="card" style="display:block">
        <div class="section-title">
          <h3>Available Recipes</h3>
          <div class="small" id="dashInfo">—</div>
        </div>

        <div id="readyRecipes">
          <!-- ready recipes will show here -->
        </div>

        <div style="height:12px"></div>

        <div class="section-title">
          <h3>Other Recipes (Missing Items)</h3>
          <div class="small">Tap "Add missing" to go to the market</div>
        </div>
        <div id="otherRecipes"></div>
      </div>

      <!-- Submit Recipe -->
      <div id="submitTab" class="card" style="display:none">
        <h3>Submit a Recipe (sends to WhatsApp)</h3>
        <div style="display:flex;flex-direction:column;gap:8px;margin-top:8px">
          <input id="subName" type="text" placeholder="Recipe name" />
          <input id="subIngredients" type="text" placeholder="Ingredients (comma separated)" />
          <textarea id="subSteps" placeholder="Steps" rows="4" style="padding:8px;border-radius:8px;border:1px solid #eee"></textarea>
          <div style="display:flex;gap:8px;align-items:center">
            <button id="btnSendRecipe" class="btn">Send to Kitchen via WhatsApp</button>
            <div class="tiny muted">We will open WhatsApp with a prefilled message</div>
          </div>
        </div>
      </div>

      <!-- Fridge (small mobile duplicate view) -->
      <div id="fridgeMobile" class="card" style="display:none">
        <h3>My Fridge</h3>
        <div id="fridgeListMobile" class="fridge-list"></div>
      </div>
    </div>

    <!-- RIGHT: sidebar -->
    <aside>
      <!-- Shop -->
      <div id="shopTab" class="card" style="display:none">
        <div class="offer-banner" id="offerBanner" style="display:none">
          <div>
            <strong>Flash Offers</strong>
            <div class="tiny muted">Grab the best student deals today</div>
          </div>
          <div class="small"><span id="offerCount">0</span> deals</div>
        </div>

        <div class="search" style="margin-bottom:12px">
          <input id="shopSearch" type="text" placeholder="Search shop items" />
          <button id="btnSearch" class="btn ghost">Search</button>
        </div>

        <div id="shopGrid" class="shop-grid"></div>
      </div>

      <!-- Fridge -->
      <div id="fridgeTab" class="card" style="display:none">
        <div class="section-title">
          <h3>My Fridge</h3>
          <div class="small">Tap item to use/remove</div>
        </div>
        <div id="fridgeList" class="fridge-list"></div>
      </div>

      <!-- Quick actions -->
      <div class="card">
        <h4>Quick Actions</h4>
        <div style="display:flex;flex-direction:column;gap:8px;margin-top:8px">
          <button id="btnRefillDemo" class="btn ghost">Refill demo ingredients</button>
          <button id="btnRefresh" class="btn ghost">Refresh data</button>
          <button id="btnLogout" class="btn ghost" style="color:var(--danger)">Logout</button>
        </div>
        <div style="height:8px"></div>
        <div class="tiny muted">Offers & shop images require ImageURL & Offer columns in your Shop sheet (optional).</div>
      </div>
    </aside>
  </div>
</main>

<!-- modal container -->
<div id="modalRoot" style="display:none"></div>

<script>
/* CONFIG: replace KITCHEN_PHONE if you want orders to go to your WhatsApp number (use country code, no +).
   Example: '254712345678' (Kenya) */
const GAS_WEBAPP_URL = 'https://script.google.com/macros/s/AKfycby60CX0FZ3Z4--2_eAhoS3pHFqkidtyPvrt8ZfuEqoLbIGVIokLdLJOKX3w9fNtVBE1/exec';
const SECRET = 'unikosecret123';
const KITCHEN_PHONE = '2547XXXXXXXX'; // replace with your kitchen WhatsApp number

// app state
let currentUser = null; // {code,name,fridge:[]}
let shopItems = []; // items from backend
let recipes = []; // list from backend
let shopFilterMissing = []; // highlighted missing + auto-scroll
let lastSearch = '';

// helper: api call
async function api(action, params = {}) {
  params.action = action;
  params.secret = SECRET;
  const q = new URLSearchParams(params);
  const url = GAS_WEBAPP_URL + '?' + q.toString();
  const resp = await fetch(url, {cache:'no-store'});
  if (!resp.ok) throw new Error('Network error');
  const json = await resp.json();
  return json;
}

// UI helpers
function $(s){return document.querySelector(s)}
function $all(s){return Array.from(document.querySelectorAll(s))}
function showMsg(msg){ const el = $('#userBadge'); el.textContent = msg; }
function capitalize(s){ if(!s) return s; return s[0].toUpperCase() + s.slice(1) }

// login
$('#btnLogin').addEventListener('click', async ()=>{
  const code = $('#codeInput').value.trim();
  if(!code){ alert('Type your code'); return; }
  try{
    showMsg('Checking...');
    const res = await api('getStudent', {code});
    if(res && res.code){
      currentUser = {code: res.code, name: res.name || res.code, fridge: res.fridge || []};
      localStorage.setItem('unico_code', currentUser.code);
      onSignedIn();
    } else {
      alert('Code not found');
      showMsg('Not signed');
    }
  }catch(err){ console.error(err); alert('Connection failed'); showMsg('Offline'); }
});

// remember shortcut
$('#btnRemember').addEventListener('click', ()=>{
  const code = $('#codeInput').value.trim();
  if(code){ localStorage.setItem('unico_code', code); alert('Will remember code'); }
});

// logout
$('#btnLogout').addEventListener('click', ()=>{
  if(confirm('Logout?')) {
    localStorage.removeItem('unico_code');
    currentUser = null;
    showLogin();
  }
});

// quick actions
$('#btnRefresh').addEventListener('click', ()=> loadAll());
$('#btnRefillDemo').addEventListener('click', async ()=>{
  if(!currentUser){ alert('Sign in first'); return; }
  const demo = ['rice','egg','tomato','pasta','garlic'];
  for(const it of demo){ try{ await api('buyItems',{code:currentUser.code, item:it}); }catch(e){}
  }
  await refreshStudent();
  alert('Demo refill done');
});

// tabs
$all('.tab').forEach(t => t.addEventListener('click', (ev)=>{
  $all('.tab').forEach(x=>x.classList.remove('active'));
  t.classList.add('active');
  const tab = t.dataset.tab;
  showTab(tab);
}));

function showTab(tab){
  $('#dashboardTab').style.display = tab==='dashboard' ? 'block' : 'none';
  $('#shopTab').style.display = tab==='shop' ? 'block' : 'none';
  $('#fridgeTab').style.display = tab==='fridge' ? 'block' : 'none';
  $('#submitTab').style.display = tab==='submit' ? 'block' : 'none';
  $('#fridgeMobile').style.display = tab==='fridge' ? 'block' : 'none';
  if(tab==='shop') renderShop();
  if(tab==='fridge') renderFridge();
  if(tab==='dashboard') renderDashboard();
}

// initial load: auto-login if saved
window.addEventListener('load', async ()=>{
  const saved = localStorage.getItem('unico_code');
  if(saved){
    $('#codeInput').value = saved;
    if(confirm('Sign in as '+saved+'?')) {
      $('#btnLogin').click();
      return;
    }
  }
  showLogin();
});

// show login UI
function showLogin(){
  $('#loginBox').style.display = 'flex';
  $('#contentArea').style.display = 'block';
  showMsg('Not signed');
  // hide signed UI elements until signed in
  $('#userBadge').textContent = 'Not signed';
  $('#dashboardTab').style.display = 'block';
  $('#shopTab').style.display = 'none';
  $('#fridgeTab').style.display = 'none';
  $('#submitTab').style.display = 'none';
  $('#fridgeMobile').style.display = 'none';
}

// on sign in
async function onSignedIn(){
  $('#loginBox').style.display = 'none';
  $('#userBadge').textContent = `${currentUser.name} • ${currentUser.code}`;
  await loadAll();
  showTab('dashboard');
}

// load all data
async function loadAll(){
  if(!currentUser) return;
  await refreshStudent();
  await loadRecipes();
  await loadShop();
  renderDashboard();
  renderShop();
  renderFridge();
}

// refresh student info
async function refreshStudent(){
  try{
    const r = await api('getStudent', {code: currentUser.code});
    if(r && r.code){ currentUser.fridge = r.fridge || []; renderFridge(); renderDashboard(); }
  }catch(e){ console.error(e) }
}

// load recipes from backend
async function loadRecipes(){
  try{
    const res = await api('getRecipes', {code: currentUser.code});
    recipes = Array.isArray(res) ? res : (res.recipes || []);
    // normalize structure: each recipe should have: recipe (name), ingredients (array), steps, canCook
    recipes = recipes.map(r=>{
      // backward compatibility: check multiple possible keys
      const name = r.recipe || r.Recipe || r.name || r['Recipe Name'] || r[0] || '';
      const ingrRaw = r.ingredients || r.Ingredients || r[1] || r.ingredientsList || [];
      const steps = r.steps || r.Steps || r[2] || r.stepsText || '';
      let ingredients = Array.isArray(ingrRaw) ? ingrRaw : (typeof ingrRaw === 'string' ? ingrRaw.split(',').map(s=>s.trim().toLowerCase()).filter(Boolean) : []);
      ingredients = ingredients.map(x=>x.toLowerCase());
      // compute canCook using currentUser fridge
      const fridgeSet = new Set((currentUser.fridge||[]).map(x=>x.toLowerCase()));
      const canCook = ingredients.every(i => fridgeSet.has(i));
      return { recipe: name, ingredients, steps, canCook };
    });
  }catch(err){ console.error('loadRecipes failed',err); recipes = []; }
}

// load shop items
async function loadShop(){
  try{
    const res = await api('getShop', {});
    // res might be array of {item,price} or object
    let items = [];
    if(Array.isArray(res)) items = res;
    else if(res.items) items = res.items;
    // normalize: item, price, image, offer
    shopItems = items.map(it=>{
      const name = it.item || it.Item || it.name || it[0] || '';
      const price = parseFloat(it.price || it.Price || it[1] || 0) || 0;
      const image = it.image || it.ImageURL || it.img || '';
      const offer = (it.offer || it.Offer || it.discount) ? Number(it.offer || it.Offer || it.discount) : null;
      return { item: name, price, image, offer };
    });
    // show offer banner if any offers exist
    const offerCount = shopItems.filter(s=>s.offer).length;
    if(offerCount>0){ $('#offerBanner').style.display='flex'; $('#offerCount').textContent = offerCount; } else { $('#offerBanner').style.display='none'; }
  }catch(err){ console.error('loadShop failed', err); shopItems = []; }
}

// render dashboard
function renderDashboard(){
  if(!recipes) return;
  const ready = recipes.filter(r=>r.canCook);
  const others = recipes.filter(r=>!r.canCook);
  $('#dashInfo').textContent = `${ready.length} ready • ${others.length} missing items`;
  const readyContainer = $('#readyRecipes'); readyContainer.innerHTML = '';
  const otherContainer = $('#otherRecipes'); otherContainer.innerHTML = '';

  ready.forEach(r=>{
    const div = document.createElement('div'); div.className='recipe-card';
    div.innerHTML = `
      <div style="display:flex;justify-content:space-between;align-items:center">
        <h4>${r.recipe}</h4>
        <div class="recipe-small">Ready</div>
      </div>
      <div class="tiny muted">Ingredients: ${r.ingredients.join(', ')}</div>
      <div style="height:8px"></div>
      <div style="display:flex;gap:8px">
        <button class="btn" data-action="cook" data-name="${encodeURIComponent(r.recipe)}">Cook Now</button>
        <button class="btn ghost" data-action="viewsteps" data-steps="${encodeURIComponent(r.steps||'')}">View steps</button>
      </div>
    `;
    readyContainer.appendChild(div);
  });

  others.forEach(r=>{
    // compute missing items
    const fridgeSet = new Set((currentUser.fridge||[]).map(x=>x.toLowerCase()));
    const missing = r.ingredients.filter(i=>!fridgeSet.has(i.toLowerCase()));
    const div = document.createElement('div'); div.className='recipe-card';
    div.innerHTML = `
      <div style="display:flex;justify-content:space-between;align-items:center">
        <h4>${r.recipe}</h4>
        <div class="recipe-small missing">${missing.length} missing</div>
      </div>
      <div class="tiny muted">Needs: ${r.ingredients.join(', ')}</div>
      <div style="height:8px"></div>
      <div style="display:flex;gap:8px">
        <button class="btn ghost" data-action="addMissing" data-missing="${encodeURIComponent(missing.join(','))}">Add missing</button>
        <button class="btn ghost" data-action="viewsteps" data-steps="${encodeURIComponent(r.steps||'')}">View steps</button>
      </div>
    `;
    otherContainer.appendChild(div);
  });

  // attach handlers
  $all('[data-action="cook"]').forEach(b => b.addEventListener('click', async (ev)=>{
    const recipeName = decodeURIComponent(b.dataset.name);
    const recipe = recipes.find(x=>x.recipe.toLowerCase() === recipeName.toLowerCase());
    if(!recipe){ alert('Recipe not found'); return; }
    // open WhatsApp then confirm to remove ingredients
    openWhatsAppOrder(recipe);
  }));

  $all('[data-action="viewsteps"]').forEach(b => b.addEventListener('click', ev=>{
    const st = decodeURIComponent(b.dataset.steps||'');
    showModal(`<pre style="white-space:pre-wrap">${escapeHtml(st||'No steps available')}</pre>`, 'Recipe steps');
  }));

  $all('[data-action="addMissing"]').forEach(b => b.addEventListener('click', ev=>{
    const missing = (decodeURIComponent(b.dataset.missing||'')||'').split(',').map(s=>s.trim()).filter(Boolean);
    shopFilterMissing = missing.map(x=>x.toLowerCase());
    // switch to shop tab and render
    document.querySelector('.tab[data-tab="shop"]').click();
    setTimeout(()=> highlightMissingInShop(), 400);
  }));
}

// render shop
function renderShop(){
  const grid = $('#shopGrid'); grid.innerHTML = '';
  const query = (lastSearch || '').toLowerCase();
  const items = shopItems.filter(it => !query || it.item.toLowerCase().includes(query));
  items.forEach(it=>{
    const div = document.createElement('div'); div.className='product';
    const imgSrc = it.image ? it.image : `https://source.unsplash.com/400x300/?${encodeURIComponent(it.item)}`;
    const hasOffer = it.offer && !isNaN(it.offer);
    const discounted = hasOffer ? ( (it.price * (100 - it.offer))/100 ).toFixed(0) : null;
    const highlight = shopFilterMissing.length && shopFilterMissing.includes(it.item.toLowerCase());
    if(highlight) div.classList.add('highlight');
    div.innerHTML = `
      <img src="${imgSrc}" alt="${escapeHtml(it.item)}" onerror="this.src='https://via.placeholder.com/400x300?text=${encodeURIComponent(it.item)}'"/>
      <div style="display:flex;justify-content:space-between;align-items:center">
        <div style="font-weight:700">${escapeHtml(it.item)}</div>
        ${hasOffer ? `<div class="offer">${it.offer}% OFF</div>` : ''}
      </div>
      <div style="display:flex;align-items:center;gap:8px">
        <div class="price">KSh ${hasOffer ? discounted : it.price}</div>
        ${hasOffer ? `<div class="oldprice">KSh ${it.price}</div>` : ''}
      </div>
      <div style="display:flex;gap:8px;margin-top:8px">
        <button class="btn add-fridge" data-item="${encodeURIComponent(it.item)}">Add to Fridge</button>
        <button class="btn ghost view-item" data-item="${encodeURIComponent(it.item)}">View</button>
      </div>
    `;
    grid.appendChild(div);
  });

  // attach handlers
  $all('.add-fridge').forEach(b => b.addEventListener('click', async ev=>{
    if(!currentUser){ alert('Sign in first'); return; }
    const item = decodeURIComponent(b.dataset.item);
    try{ await api('buyItems', {code: currentUser.code, items: [item], item}); }catch(e){ console.error(e) }
    await refreshStudent();
    alert(item + ' added to fridge');
  }));
  $all('.view-item').forEach(b => b.addEventListener('click', ev=>{
    const item = decodeURIComponent(b.dataset.item);
    showModal(`<div style="display:flex;flex-direction:column;gap:8px"><strong>${escapeHtml(item)}</strong><div class="tiny muted">Price and offer shown in card. Add to fridge to buy.</div></div>`, item);
  }));
}

// highlight missing items in shop
function highlightMissingInShop(){
  if(!shopFilterMissing || shopFilterMissing.length===0) return;
  const first = $('.product.highlight');
  if(first){ first.scrollIntoView({behavior:'smooth',block:'center'}); }
}

// render fridge
function renderFridge(){
  const container = $('#fridgeList'); container.innerHTML = '';
  const mobile = $('#fridgeListMobile'); mobile.innerHTML = '';
  const arr = currentUser ? (currentUser.fridge || []) : [];
  if(arr.length===0){ container.innerHTML = '<div class="tiny muted">Fridge is empty</div>'; mobile.innerHTML = container.innerHTML; return; }
  arr.forEach(it=>{
    const el = document.createElement('div'); el.className='fridge-item';
    el.innerHTML = `<div>${escapeHtml(it)}</div><div style="margin-left:8px"><button class="btn ghost use-item" data-item="${encodeURIComponent(it)}">Use</button></div>`;
    container.appendChild(el);
    const el2 = el.cloneNode(true);
    mobile.appendChild(el2);
  });
  // bind use-item
  $all('.use-item').forEach(b=> b.addEventListener('click', async ev=>{
    const item = decodeURIComponent(b.dataset.item);
    if(!confirm('Remove one '+item+' from your fridge?')) return;
    try{ await api('useIngredient',{code: currentUser.code, item}); } catch(e){ console.error(e); alert('Failed'); }
    await refreshStudent();
  }));
}

// open WhatsApp order -> then confirm to remove ingredients
function openWhatsAppOrder(recipe){
  if(!currentUser){ alert('Sign in first'); return; }
  const phone = KITCHEN_PHONE.replace(/\D/g,'');
  const ingredients = recipe.ingredients.join(', ');
  const msg = `Unico Kitchen Order\nStudent: ${currentUser.code}\nName: ${currentUser.name}\nRecipe: ${recipe.recipe}\nIngredients: ${ingredients}\nPlease confirm and prepare.`;
  const waUrl = `https://wa.me/${phone}/?text=${encodeURIComponent(msg)}`;
  // open WhatsApp (new tab)
  window.open(waUrl, '_blank');
  // ask user to confirm sending, then call cook endpoint
  setTimeout(async ()=>{
    if(confirm('After you send the WhatsApp message, press OK to confirm order and remove used ingredients from your fridge.')) {
      try{
        await api('cook',{code: currentUser.code, recipe: recipe.recipe});
        await refreshStudent();
        alert('Order confirmed and ingredients removed from your fridge.');
      }catch(e){ console.error(e); alert('Failed to confirm order'); }
    } else {
      alert('Order not confirmed. Ingredients remain in your fridge.');
    }
  }, 300);
}

// submit recipe via WhatsApp (no backend write)
$('#btnSendRecipe').addEventListener('click', ()=>{
  const name = $('#subName').value.trim();
  const ingredients = $('#subIngredients').value.trim();
  const steps = $('#subSteps').value.trim();
  if(!name || !ingredients){ alert('Please provide name and ingredients'); return; }
  const phone = KITCHEN_PHONE.replace(/\D/g,'');
  const msg = `Recipe Submission\nStudent: ${currentUser ? currentUser.code : 'Guest'}\nRecipe: ${name}\nIngredients: ${ingredients}\nSteps: ${steps}`;
  const waUrl = `https://wa.me/${phone}/?text=${encodeURIComponent(msg)}`;
  window.open(waUrl, '_blank');
  alert('WhatsApp opened. Send the message to submit the recipe.');
});

// search shop
$('#btnSearch').addEventListener('click', ()=>{
  lastSearch = $('#shopSearch').value.trim();
  renderShop();
});

// small modal & utils
function showModal(html, title='') {
  const root = $('#modalRoot');
  root.innerHTML = `<div class="modal"><div class="card"><div style="display:flex;justify-content:space-between;align-items:center"><h3 style="margin:0">${escapeHtml(title)}</h3><button id="closeModal" class="btn ghost">Close</button></div><div style="height:8px"></div><div>${html}</div></div></div>`;
  root.style.display = 'block';
  $('#closeModal').addEventListener('click', ()=>{ root.style.display='none'; root.innerHTML=''; });
}
function escapeHtml(s){ return (''+s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'); }

// initial fallback: try to load shop and recipes (if signed)
async function startIfSigned(){
  const saved = localStorage.getItem('unico_code');
  if(saved){
    try{
      const r = await api('getStudent',{code: saved});
      if(r && r.code){ currentUser = {code: r.code, name: r.name || r.code, fridge: r.fridge || []}; onSignedIn(); }
    }catch(e){ console.warn('auto sign-in failed') }
  }
}
startIfSigned();
</script>
</body>
</html>




